import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
train = pd.read_excel("Downloads/Dataset.xlsx", sheet_name="train")
test = pd.read_excel("Downloads/Dataset.xlsx", sheet_name="test")
ideal = pd.read_excel("Downloads/Dataset.xlsx", sheet_name="ideal")

# Task-1: Calculate Least Square Error for Each Column
l1 = []
least_square = []
for i in range(1, len(train.columns)):
    lse = []
    for j in range(1, len(ideal.columns)):
        mse = 0
        for k in range(len(train)):
            t1 = train.iloc[k, i]
            i1 = ideal.iloc[k, j]
            mse = mse + ((t1 - i1) ** 2)
        lse.append(mse / len(train))
    min_l = min(lse)
    index = lse.index(min_l)
    l1.append(index + 1)
    least_square.append(min_l)

task1 = pd.DataFrame({"Col_name": l1, "ls-error": least_square})

# Task-2: Merge Ideal Functions with Test Data
ideals = []
for i in range(0, len(task1)):
    ideals.append(ideal[["x", f"y{str(task1.iloc[i, 0])}"]])

for i in ideals:
    test = test.merge(i, on='x', how='left')

# Calculate Deviation and Ideal Index
ideal_index = []
deviation = []
for i in range(len(test)):
    mse_list = []
    for j in range(2, len(test.columns)):
        v1 = test.iloc[i, 1]
        v2 = test.iloc[i, j]
        mse = ((v1 - v2) ** 2)
        mse_list.append(mse)
    min_l = min(mse_list)

    if min_l < np.sqrt(2) * 0.089005:
        deviation.append(min_l)
        index = mse_list.index(min_l)
        ideal_index.append(index)
    else:
        deviation.append(min_l)
        ideal_index.append('miss')

test["Deviation"] = deviation
test["Ideal Index"] = ideal_index

# Data Visualization

# Task-1 Visualization
plt.figure(figsize=(10, 6))
sns.barplot(data=task1, x="Col_name", y="ls-error")
plt.title("Task-1: Least Square Error for Each Column")
plt.xlabel("Column Index")
plt.ylabel("Least Square Error")
plt.xticks(rotation=45)
plt.show()

# Task-2 Visualization
plt.figure(figsize=(10, 6))
for i in range(0, len(task1)):
    plt.plot(test["x"], test[f"y{str(task1.iloc[i, 0])}"], label=f"y{str(task1.iloc[i, 0])} (Merged)", marker='o')

plt.title("Task-2: Merged Columns vs. x")
plt.xlabel("x")
plt.ylabel("Values")
plt.legend()
plt.show()

# Deviation Visualization
plt.figure(figsize=(10, 6))
sns.scatterplot(data=test, x="x", y="Deviation")
plt.title("Deviation vs. x")
plt.xlabel("x")
plt.ylabel("Deviation")
plt.show()

# Ideal Index Visualization
plt.figure(figsize=(8, 6))
sns.countplot(data=test, x="Ideal Index")
plt.title("Ideal Index Count")
plt.xlabel("Ideal Index")
plt.ylabel("Count")
plt.show()
